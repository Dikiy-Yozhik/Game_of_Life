// === Игра в Жизнь ===

// === Цель ===
// Написать легко конфигурируемый клтеочный автомат

// === ТЗ ===
/*
    * Использовать ООП. Обязательные классы:
        а) Game - содержит настройку мира / правила игры
        b) Cell - класс ячейки
        c) Field - класс игрового поля, содержит ячейки, реализует метод 
            по переходу к следующему шагу игры

    * Настройка мира / Правила игру содержатся в классе Game и их можно менять

    * Игровое поле отображается в терминале, но можно и UI

    * Использовать пройденные на лекциях материалы

    * (доп на 9-10) Чтобы для изменения настроек мира не перекомпилировать код,
        заставить класс Game читать настройки из файла конфигурации, YAML / JSON
*/


// === Правила игры ===
// Первое поколение - положение клеток в начале игры
// Их должен задать пользователь, но для начала можно выставлять рандомные

// У клетки есть два состояния: живая и мертвая. Если что, можно будет добавить еще разных состояний

// Каждое новое поколение рассчитывается само по следующим правилам:
// - В путой клетке, рядом с которой есть 3 живые клетки, зарождается жизнь
// - Если у живой клетки 2 или 3 соседа, она продолжает жить
// - Если у клетки меньше 2 или больше 3 соседей она умирает

// Игра прекращается, если все клетки умерли или достигла стабильного состояния


// === Проектирование ===
/*
    * ООП
    * Архитектура MVC (Model, View, Controller)
    
    --- Model ---
    * Класс "Cell": одна ячейка игрового поля (пустая, живая)
        []

    * Класс "Field": набор ячеек
        [][][][][][]
        [][][][][][]
        [][][][][][]
        [][][][][][]
        [][][][][][]

    --- Controller ---
    * Класс "Game": определяет правила игры и игровое состояние

    --- View ---
    * Класс "View": отображение (в терминале или UI)
*/